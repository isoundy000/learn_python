#!/usr/bin/env python
# -*- coding:utf-8 -*-

__author__ = 'ghou'


# Committing
# commit()用于提交当前事务。它总是预先发出flush()以将任何剩余状态刷新到数据库;这与“自动刷新”设置无关。如果不存在事务，则会引发错误。
# 注意，会话的默认行为是始终存在“事务”;可以通过设置autocommit=True来禁用此行为。在自动提交模式中，可以通过调用begin()方法启动事务。
# 这里的术语“事务”指的是会话本身中的事务构造，它可能维护零个或多个实际数据库(DBAPI)事务。单个DBAPI连接开始参与“事务”，
# 因为它首先用于执行SQL语句，然后保持存在，直到会话级别的“事务”完成。有关更多细节，请参见管理事务。
# commit()的另一种行为是，默认情况下，它会在提交完成后终止所有实例的状态。这样，当下一次访问实例时，无论是通过属性访问，
# 还是通过查询结果集中出现的实例，它们都会接收到最近的状态。要禁用此行为，请使用expire_on_commit=False配置sessionmaker。
# 通常，加载到会话中的实例不会被后续查询更改;假设当前事务是隔离的，因此只要事务继续进行，最近加载的状态就是正确的。
# 设置autocommit=True在一定程度上对这个模型有效，因为会话在属性状态方面的行为完全相同，只是不存在事务。
#
# Rolling Back
# rollback()回滚当前事务。对于默认配置的会话，会话的后回滚状态如下:
#     所有事务都回滚，所有连接都返回到连接池，除非会话被直接绑定到连接，在这种情况下，连接仍然保持(但仍然回滚)。
#     当对象在事务的生命周期内添加到会话时，它们最初处于挂起状态的对象将被删除，对应于它们的INSERT语句被回滚。属性的状态保持不变。
#     在事务生命周期内标记为已删除的对象将被提升回持久状态，与回滚其DELETE语句相对应。请注意，如果这些对象首先在事务中挂起，则该操作优先。
#     所有未删除的对象都已完全过期。
#
# 了解了该状态后，会话可以在回滚发生后安全地继续使用。
# 当flush()失败时(通常由于主键、外键或“不可空”约束违反等原因)，就会自动发出rollback()(目前在部分失败后无法继续刷新)。但是，刷新过程总是使用自己的事务标定器，称为子事务，在会话文档字符串中更详细地描述了这一点。这里的意思是，即使数据库事务已经回滚，最终用户仍然必须发出rollback()来完全重置会话的状态。
# Closing
#
# close()方法发出expunge_all()，并释放任何事务性/连接资源。当连接返回到连接池时，事务状态也会回滚。
#!/usr/bin/env python
# -*- coding:utf-8 -*-

__author__ = 'ghou'

# 数据库分库分表，何时分？怎样分？详细解读，一篇就够了
# 一. 数据切分
#
# 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到1000W或100G以后，由于查询维 度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行切分了，切分的目的就在于减少数据库的负担，缩短查询时间。
#
# 数据库分布式核心内容无非就是数据切分（Sharding），以及切分后对数据的定位、整合。数据切分就是将数据分散存储到多个数据库中，使得单一数据库中的数据量变小，通过扩充主机的数量缓解单一数据库的性能问题，从而达到提升数据库操作性能的目的。数据切分根据其切分类型，可以分为两种方式：垂直（纵向）切分和水平（横向）切分
# 什么是垂直（纵向）切分？
#
# 垂直切分常见有垂直分库和垂直分表两种。
#
# 垂直分库就是根据业务耦合性，将关联度低的不同表存储在不同的数据库。做法与大系统拆分为多个小系统类似，按业务分类进行独立划分。与"微服务治理"的做法相似，每个微服务使用单独的一个数据库。如图：


# 垂直分表是基于数据库中的"列"进行，某个表字段较多，可以新建一张扩展表，将不经常用或字段长度较大的字段拆分出去到扩展表中。在字段很多的情况下（例 如一个大表有100多个字段），通过"大表拆小表"，更便于开发与维护，也能避免跨页问题，MySQL底层是通过数据页存储的，一条记录占用空间过大会导 致跨页，造成额外的性能开销。另外数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了 磁盘IO，从而提升了数据库性能。
#
# 垂直切分的优点：
#
#     解决业务系统层面的耦合，业务清晰
#     与微服务的治理类似，也能对不同业务的数据进行分级管理、维护、监控、扩展等
#     高并发场景下，垂直切分一定程度的提升IO、数据库连接数、单机硬件资源的瓶颈
#
# 缺点：
#
#     部分表无法join，只能通过接口聚合方式解决，提升了开发的复杂度
#     分布式事务处理复杂
#     依然存在单表数据量过大的问题（需要水平切分）
#
# 什么是水平（横向）切分？
#
# 当一个应用难以再细粒度的垂直切分，或切分后数据量行数巨大，存在单库读写、存储性能瓶颈，这时候就需要进行水平切分了。
#
# 水平切分分为库内分表和分库分表，是根据表内数据内在的逻辑关系，将同一个表按不同的条件分散到多个数据库或多个表中，每个表中只包含一部分数据，从而使得单个表的数据量变小，达到分布式的效果。如图所示：
#
# 库内分表只解决了单一表数据量过大的问题，但没有将表分布到不同机器的库上，因此对于减轻MySQL数据库的压力来说，帮助不是很大，大家还是竞争同一个物理机的CPU、内存、网络IO，最好通过分库分表来解决。
#
# 水平切分的优点：
#
#     不存在单库数据量过大、高并发的性能瓶颈，提升系统稳定性和负载能力
#     应用端改造较小，不需要拆分业务模块
#
# 缺点：
#
#     跨分片的事务一致性难以保证
#     跨库的join关联查询性能较差
#     数据多次扩展难度和维护量极大
#
# 水平切分后同一张表会出现在多个数据库/表中，每个库/表的内容不同。
# 什么时候考虑切分
#
# 1、能不切分尽量不要切分
#
# 并不是所有表都需要进行切分，主要还是看数据的增长速度。切分后会在某种程度上提升业务的复杂度，数据库除了承载数据的存储和查询外，协助业务更好的实现需求也是其重要工作之一。
#
# 不到万不得已不用轻易使用分库分表这个大招，避免"过度设计"和"过早优化"。分库分表之前，不要为分而分，先尽力去做力所能及的事情，例如：升级硬件、升级网络、读写分离、索引优化等等。当数据量达到单表的瓶颈时候，再考虑分库分表。
#
# 2、数据量过大，正常运维影响业务访问
#
# 这里说的运维，指：
#
# 1）对数据库备份，如果单表太大，备份时需要大量的磁盘IO和网络IO。例如1T的数据，网络传输占50MB时候，需要20000秒才能传输完毕，整个过程的风险都是比较高的
#
# 2）对一个很大的表进行DDL修改时，MySQL会锁住全表，这个时间会很长，这段时间业务不能访问此表，影响很大。如果使用pt- online-schema-change，使用过程中会创建触发器和影子表，也需要很长的时间。在此操作过程中，都算为风险时间。将数据表拆分，总量减 少，有助于降低这个风险。
#
# 3）大表会经常访问与更新，就更有可能出现锁等待。将数据切分，用空间换时间，变相降低访问压力
#
# 3、随着业务发展，需要对某些字段垂直拆分
#
# 4、数据量快速增长
#
# 随着业务的快速发展，单表中的数据量会持续增长，当性能接近瓶颈时，就需要考虑水平切分，做分库分表了。此时一定要选择合适的切分规则，提前预估好数据容量
#
# 5、安全性和可用性
#
# 鸡蛋不要放在一个篮子里。在业务层面上垂直切分，将不相关的业务的数据库分隔，因为每个业务的数据量、访问量都不同，不能因为一个业务把数 据库搞挂而牵连到其他业务。利用水平切分，当一个数据库出现问题时，不会影响到100%的用户，每个库只承担业务的一部分数据，这样整体的可用性就能提 高。
# 案例分析
#
# 1、用户中心业务场景
#
# 用户中心是一个非常常见的业务，主要提供用户注册、登录、查询/修改等功能，其核心表为：


# 任何脱离业务的架构设计都是耍流氓，在进行分库分表前，需要对业务场景需求进行梳理：
#
#     用户侧：前台访问，访问量较大，需要保证高可用和高一致性。主要有两类需求：
#     用户登录：通过login_name/phone/email查询用户信息，1%请求属于这种类型
#     用户信息查询：登录之后，通过uid来查询用户信息，99%请求属这种类型
#     运营侧：后台访问，支持运营需求，按照年龄、性别、登陆时间、注册时间等进行分页的查询。是内部系统，访问量较低，对可用性、一致性的要求不高。
#
# 2、水平切分方法
#
# 当数据量越来越大时，需要对数据库进行水平切分，上文描述的切分方法有"根据数值范围"和"根据数值取模"。
#
# "根据数值范围"：以主键uid为划分依据，按uid的范围将数据水平切分到多个数据库上。例如：user-db1存储uid范围为0~1000w的数据，user-db2存储uid范围为1000w~2000wuid数据。
#
#     优点是：扩容简单，如果容量不够，只要增加新db即可。
#     不足是：请求量不均匀，一般新注册的用户活跃度会比较高，所以新的user-db2会比user-db1负载高，导致服务器利用率不平衡
#
# "根据数值取模"：也是以主键uid为划分依据，按uid取模的值将数据水平切分到多个数据库上。例如：user-db1存储uid取模得1的数据，user-db2存储uid取模得0的uid数据。
#
#     优点是：数据量和请求量分布均均匀
#     不足是：扩容麻烦，当容量不够时，新增加db，需要rehash。需要考虑对数据进行平滑的迁移。
#
# 3、非uid的查询方法
#
# 水平切分后，对于按uid查询的需求能很好的满足，可以直接路由到具体数据库。而按非uid的查询，例如login_name，就不知道具体该访问哪个库了，此时需要遍历所有库，性能会降低很多。
#
# 对于用户侧，可以采用"建立非uid属性到uid的映射关系"的方案；对于运营侧，可以采用"前台与后台分离"的方案。
#
# 3.1、建立非uid属性到uid的映射关系
#
# 1）映射关系
#
# 例如：login_name不能直接定位到数据库，可以建立login_name→uid的映射关系，用索引表或缓存来存储。当访问login_name时，先通过映射表查询出login_name对应的uid，再通过uid定位到具体的库。
#
# 映射表只有两列，可以承载很多数据，当数据量过大时，也可以对映射表再做水平切分。这类kv格式的索引结构，可以很好的使用cache来优化查询性能，而且映射关系不会频繁变更，缓存命中率会很高。
#
# 3.2、前台与后台分离
#
# 对于用户侧，主要需求是以单行查询为主，需要建立login_name/phone/email到uid的映射关系，可以解决这些字段的查询问题。
#
# 而对于运营侧，很多批量分页且条件多样的查询，这类查询计算量大，返回数据量大，对数据库的性能消耗较高。此时，如果和用户侧公用同一批服务或数据库，可能因为后台的少量请求，占用大量数据库资源，而导致用户侧访问性能降低或超时。
#
# 这类业务最好采用"前台与后台分离"的方案，运营侧后台业务抽取独立的service和db，解决和前台业务系统的耦合。由于运营侧对可用 性、一致性的要求不高，可以不访问实时库，而是通过binlog异步同步数据到运营库进行访问。在数据量很大的情况下，还可以使用ES搜索引擎或Hive 来满足后台复杂的查询方式。
# 常用的支持分库分表中间件：
#
#     sharding-jdbc（当当）
#     TSharding（蘑菇街）
#     Atlas（奇虎360）
#     Cobar（阿里巴巴）
#     MyCAT（基于Cobar）
#     Oceanus（58同城）
#     Vitess（谷歌）
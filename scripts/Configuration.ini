# Configuration for Pseudo Build.
#
# pseudo tags: Default pseudo tags for target locales.
# pseudo_buildtype: Sandbox Build Type can be release/beta, default is beta.
# pseudo_key_ignores: It defines keys which should not be added pseudo tags, use regex expression to filter these keys.
#                     Format:  [name] = filename_regex
#									key1 = key1_regex
#									key2 = key2_regex
#                     Notice! If the value contains comma(","), the entire value string should be surrounded with ''' or """
# pseudo_value_ignores: It defines to filter key-value pairs, whose values are matched
#                       Format:  [name] = filename_regex
#									  value1 = value1_regex
#									  value2 = value2_regex
#                       Notice! If the value contains comma(","), the entire value string should be surrounded with ''' or """
# dependencies: Rebuild means when doing pseudo build for current release, it will rebuild the pseudo build for also the child release,
#               otherwise it will re-use the existing not-expired pseudo build of the child release.
#               Format: Dependent_release_id = rebuild
# pseudo_placeholder_marks: The default pseudo mark for placeholder are ‘0’.
#                           Format: file_type = pseudo_mark
[pseudo_tags]
	zh-cn = 中
	de = Ö
	fr = ç
	zh-tw = 國
	ja = は

[pseudo_buildtype]
	buildtype = release

[pseudo_key_ignores]
	[[file1]]
		name = """^.*?platform\/gxt-locale\/src\/main\/resources \/sencha\/gxt\/messages\/client\/XMessages(.){2,5}\.properties$"""
		[[[key]]]
			key1 = ^.*$
	[[file2]]
		name = .*
		[[[key]]]
			key1 = ^[Vv]ersion$
	[[file3]]
		name = """^.*?platform\/sencha\-platform\/framework\/locale\/(.){2,5}\/general\.js$"""
		[[[key]]]
			key1 = ^\'util.longDateFormat\'_

[pseudo_value_ignores]
	[[file1]]
		name = .*
		[[[value]]]
			value1 = """ ^\s*[\d\.\,\ \:]*\s*$ """
			value2 = ^[\w\W]*<.*>[\w\W]*$
			value3 = ^.*\(.*\).*$
			value4 = ^[\w\W]*&[\w\W]*$

[dependencies]

[pseudo_placeholder_marks]
	resx=_




# Configuration for drop handling in GRM.
# vgr_generation: Configure some arguments for vgr generating process, including setment count per vgr file
#                 and whether to split all segments of one file into the two vgr files while the segment count number in the current vgr exceeds the segment_count_per_vgr value.
#                 Format: segment_count = count(Integer)
#                         segment_split = True/False
# locale_mapping: For some locale of a given release, it can directly use the translation resources of other supported locales.
#                 Format: target_locale = source_locale1, source_locale2,...
#                 Notice! the list of ws_require_locales should be ended with comma(","), even the value is only one or none.
# ws_require_locales: It defines a locale list including locales which are required in WorldServer.
#                     Format: ws_require_locales = locale_a,locale_b,...
#                     Notice! the list of ws_require_locales should be ended with comma(","), even the value is only one or none.
# sync_source: For some release, the translations might need to sync with the source.
#              Format: sync_source = False/False.
# excluded_files: Configure files that should not be handled by GRM due to wrong format or other issues, GRM will skip handling these files.
#                 Format: name1 = file_regex1
#                         name2 = file_regex2
# packages_for_excluded: Configure files that should be packed into specific packages for further operations.
#                      Format: package_name = file_type1, file_type2,...
#                      Notice! the list of ws_require_locales should be ended with comma(","), even the value is only one or none.
[vgr_generation]
	segments_split = True
	segment_count = 500

[locale_mapping]

[ws_require_locales]
	ws_require_locales = en,de,fr,ja,ko,zh-cn,zh-tw,es,

[sync_source]
	sync_source = False

[excluded_files]
	[[file]]


[packages_for_excluded]

[email_receivers]
	dupkey_receiver_list = reedj,
	l10nverify_receiver_list = reedj,

# Configuration for file level.
# file_validators: It defines validators for target files in target locales which are following the file regex. The list of validator should be ended with comma(","), even the value is only one or none.
#                  Format: file_regex = validator1,validator2
#                  Available validators: [JSON_SYNTAX_VALIDATOR, JS_SYNTAX_VALIDATOR, PROPERTIES_SYNTAX_VALIDATOR, L10N_PARSER_VALIDATOR, NATIVE_2_ASCII_CONVERTER, ENCODING_CONVERTER].
# ENCODING_CONVERTER: Encoding for specific source files. Format: ENCODING_CONVERTER_[encoding_type]
#                     For [encoding_type], please refer to: https://docs.python.org/2.4/lib/standard-encodings.html
# validation_check: It defines validators for target files which are following the file regex.
#                     Format: file1 = filename_regex1
#                             file2 = filename_regex2
# parser_type: Parser types for specify source files. Refer to parser types defined in l10n_parser
#              Format: file_name_regex = parser_type

[file_validators]
	[[*]]

[validation_check]
	[[file]]

[parser_type]
	^.*?\.vmsg$=VMSG_SPACE
